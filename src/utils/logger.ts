import fs from 'node:fs';

import type { FileSystemItem } from '../types/index.js';

export interface LogEntry {
  timestamp: string;
  directories: string[];
  renamedItems: FileSystemItem[];
  updatedFiles: string[];
  totalRenamed: number;
  totalUpdated: number;
}

/**
 * Write a log entry to the baptist.log file
 */
export function writeLog(logEntry: LogEntry): void {
  const logContent = generateLogContent(logEntry);

  try {
    fs.writeFileSync('baptist.log', logContent, 'utf8');
  } catch (error) {
    console.error('Failed to write log file:', error);
  }
}

/**
 * Generate the content for the log file
 */
function generateLogContent(logEntry: LogEntry): string {
  const { timestamp, directories, renamedItems, updatedFiles, totalRenamed, totalUpdated } = logEntry;

  const lines: string[] = [
    '='.repeat(60),
    'Baptist - File Rename Report',
    '='.repeat(60),
    '',
    `Timestamp: ${timestamp}`,
    `Processed directories: ${directories.join(', ')}`,
    '',
    `Summary:`,
    `  - Files/folders renamed: ${totalRenamed}`,
    `  - Import statements updated: ${totalUpdated}`,
    '',
  ];

  if (renamedItems.length > 0) {
    lines.push('File/Folder Renames:', '-'.repeat(40));
    for (const item of renamedItems) {
      if (item.needsRename) {
        const type = item.isDirectory ? '[DIR]' : '[FILE]';
        lines.push(`  ${type} ${item.originalPath} => ${item.newPath}`);
      }
    }
    lines.push('');
  } else {
    lines.push('No files or folders were renamed.', '');
  }

  if (updatedFiles.length > 0) {
    lines.push('Files with Updated Import Statements:', '-'.repeat(40));
    for (const file of updatedFiles) {
      lines.push(`  * ${file}`);
    }
    lines.push('');
  } else {
    lines.push('No import statements were updated.', '');
  }

  lines.push(`Report generated by Baptist at ${new Date().toISOString()}`, '');

  return lines.join('\n');
}

/**
 * Create a log entry from the operation results
 */
export function createLogEntry(
  directories: string[],
  renamedItems: FileSystemItem[],
  updatedFiles: string[]
): LogEntry {
  const itemsToRename = renamedItems.filter((item) => item.needsRename);

  return {
    timestamp: new Date().toISOString(),
    directories,
    renamedItems: itemsToRename,
    updatedFiles,
    totalRenamed: itemsToRename.length,
    totalUpdated: updatedFiles.length,
  };
}
